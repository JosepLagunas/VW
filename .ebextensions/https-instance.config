Resources:
  # configure our securty group for port 443.
  sslSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      CidrIp: 0.0.0.0/0
      
files:

  # redirect http to docker server.
  /etc/nginx/conf.d/http_custom_proxy.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      server {
        listen 80;
        return 301 https://$host$request_uri;
      }
      
  /etc/nginx/conf.d/https_custom.pre:
    mode: "000644"
    owner: root
    group: root
    content: |
      # HTTPS Server

      server {
        listen 443;
        server_name localhost;

        ssl on;

        ssl_certificate      /etc/letsencrypt/live/ebcert/fullchain.pem;
        ssl_certificate_key  /etc/letsencrypt/live/ebcert/privkey.pem;

        ssl_session_timeout 5m;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_prefer_server_ciphers on;

        proxy_buffer_size          128k;
        proxy_buffers              4 256k;
        proxy_busy_buffers_size    256k;

        location / {
          proxy_pass http://docker;
          proxy_http_version 1.1;

          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
 
        # Rule for legitimate ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx) 
        location ^~ /.well-known/acme-challenge/ {
          # No HTTP authentication
          allow all;

          # Set correct content type. According to this:
          # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
          # Current specification requires "text/plain" or no content header at all.
          # It seems that "text/plain" is a safe option.
          default_type "text/plain";
    
          # Change document root: this path will be given to certbot as the 
          # `-w` param of the webroot plugin.
          root /var/lib/letsencrypt/lklp.com;
        }

        # Hide /acme-challenge subdirectory and return 404 on all requests.
        # It is somewhat more secure than letting Nginx return 403.
        # Ending slash is important!
        location = /.well-known/acme-challenge/ {
           return 404;
        }
      }


packages: 
  yum:
    epel-release: [] 
    
container_commands:
  00_create_dir:
    command: "mkdir -p /opt/certbot"
  01_alive:
    command: "echo _____________CONFIG_________FOUND____________"
  10_installcertbot:
    command: "wget https://dl.eff.org/certbot-auto  -O /opt/certbot/certbot-auto"
  20_permission: 
    command: "chmod a+x /opt/certbot/certbot-auto"
  30_getcert:
    command: "sudo /opt/certbot/certbot-auto certonly --debug --non-interactive --email josep.lagunas@gmail.com --agree-tos --standalone --expand --domains laklp.com,www.laklp.com --pre-hook \"sudo service nginx stop\" --post-hook \"sudo service nginx start\""
  40_link:
    command: "ln -sf /etc/letsencrypt/live/laklp.com /etc/letsencrypt/live/ebcert"
  50_config:
    command: "mv /etc/nginx/conf.d/https_custom.pre /etc/nginx/conf.d/https_custom.conf"
  70_setrenewal:
    command: "(crontab -l ; echo '0 6 * * * root /opt/certbot/certbot-auto renew --standalone --pre-hook \"service stop nginx\" --post-hook \"service start nginx\" --force-renew') | crontab -"